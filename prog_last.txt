
#Q1. 1.  Read the Texas Airbnb File into a pandas DataFrame and then use the first column as index
data = pd.read_csv("Airbnb_Texas_Rentals(1).csv",index_col = 0)
data.head(5)
#Q2. Drop records that have a missing value in any of average_rate_per_night, bedrooms_count, date_of_listing, latitude, and longitude
data.dropna(subset = ["average_rate_per_night","bedrooms_count","date_of_listing","latitude","longitude"], inplace = True)
data.head()
#Q3. There is any negative number in average rate column? If yes, remove the related rows
 data['average_rate_per_night']= data['average_rate_per_night'].str.replace('$','')
data['average_rate_per_night'] = data['average_rate_per_night'].fillna(0).astype(int)
# no negative number found
bools = data['average_rate_per_night']<0
bools.any()
False
#Q4. What is the average price of 2-bedroom listing? Write statements to calculate it. 
two_bed = data[(data['bedrooms_count'] == '2')]
data['average_rate_per_night'][data['bedrooms_count']=='2'].mean()
193.99878677585684
#Q5.5. In the ORIGINAL DataFrame, add TX to the end of all cities in the city column. 
#For example, if the city is Houston, the new content is Houston, TX.  Display the first 5 rows of the DataFrame. 
data['city'] = data['city'] + ', TX'
data['average_rate_per_night']
# 6. Display the average nightly price of 2-bedroom grouped by each city. 
a = data['average_rate_per_night'][data['bedrooms_count']=='2'].groupby(data['city'])
a.mean()
#7. Display a heatmap on Google map for all listings. What are the five popular areas for Airbnb listings in Texas? 
import gmaps
gmaps.configure(api_key= "AIzaSyDUG1O3wkhGiv9RvnbKUr3dvLdzLQSBC92")
hou_coordinates = (31.9686, -99.9018) 
fig = gmaps.figure(center=hou_coordinates, zoom_level=5) 
locations = data[['latitude','longitude']]
fig.add_layer(gmaps.heatmap_layer(locations))
fig
A Jupyter widget could not be displayed because the widget state could not be found. This could happen if the kernel storing the widget is no longer available, or if the widget state was not saved in the notebook. You may be able to create the widget by running the appropriate cells.
#. 8. Ask the user to enter a city and the number of bedrooms. Your program will display an average nightly rate based on the user’s input. 
usercity = input('Enter a city:');
userbedrooms = input('Enter bedroom_count:');
Enter a city:Houston, TX
Enter bedroom_count:4
mask = (data['bedrooms_count']==userbedrooms) &  (data['city']==usercity)
data[mask]['average_rate_per_night'].mean()
?
1259.1333333333334
#9. Write statements to display the numbers of listings of each bedroom type, from the highest to the lowest. Which room type has the largest number of listings? 
max_count = data['bedrooms_count'].value_counts()
max_count
#bedrooms_count== 1 has maximum
# Q10 Write statements to display the average nightly rate for each city where it has at least 100 listings. 
a = data.groupby('city').filter(lambda x: len(x)>=100)
b = a.groupby('city')
b['average_rate_per_night'].mean()
#13. Group the listings by city where each city has at least 50 1-bedroom listings. Display the top 10 cities where they have the largest increase of nightly price between 2016 and 2017. Display the data with a descending order on the difference, 
#along with their 2016 and 2017 average nightly rate of 1-bedroom listings. 
data['date_of_listing'] = pd.to_datetime(data['date_of_listing'])
data['date_of_listing'].dtype
dtype('<M8[ns]')
data['year'] = pd.to_datetime(data['date_of_listing'])
data['year1']= data['year'].dt.year
#create a data
grouped_1bed = data[data['bedrooms_count'] =='1']
#I want to keep the cities with  >= 50 listings
grouped_1bed = grouped_1bed.groupby('city').filter(lambda x : len(x)>=50)
grouped_1bed
?
#grouped_1bed.size()
pivot_1bed_city_year = grouped_1bed.pivot_table('average_rate_per_night',index= 'city',columns = data['date_of_listing'].dt.year)
pivot_1bed_city_year
pivot_2016_2017 = pivot_1bed_city_year.dropna(subset=[2016,2017])
pivot_1bed_city_year.columns
Int64Index([2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017], dtype='int64', name='date_of_listing')
pivot_2016_2017['diff'] = pivot_2016_2017[2017]- pivot_2016_2017[2016]
pivot_2016_2017
def top(df, n=10,columns = 'diff'):
    return df.sort_values(by = columns)[-n:]
top(pivot_2016_2017)[[2016,2017,'diff']][::-1]
#14. Draw a line chart for displaying the average nightly price (of all types) by years.
#The line chart needs to have a red color line, a title, and x, y labels. 
grouped_year = data['average_rate_per_night'].groupby(data['year1'])
ax= grouped_year.mean().plot(figsize = (8,4), marker = 'o',color = 'red')
ax.set_xlabel('year')
ax.set_ylabel('average_rate_per_night')
ax.set_title('rate based on year')
?
#15. Draw a line chart for displaying the average nightly prices of 1-bedroom, 2-bedroom and 3-bedroom by years. 
#Since there is no data for year 2008 for 2-bedroom and 3-bedroom, the years start from 2009. 
fig, ax= plt.subplots()
?
?
one_bedroom = data.loc[data['bedrooms_count']=='1']
two_bedroom = data.loc[data['bedrooms_count'] == '2']
three_bedroom = data.loc[data['bedrooms_count']== '3']
ax = one_bedroom['average_rate_per_night'].groupby(data['year1'])
ax2= two_bedroom['average_rate_per_night'].groupby(data['year1'])
ax3 = three_bedroom['average_rate_per_night'].groupby(data['year1'])
ax.mean().plot(figsize = (12,8), marker = 's')
ax2.mean().plot(figsize = (12,8), marker = 's')
ax3.mean().plot(figsize = (12,8), marker = 's')
#16. Create a figure which contains four subplots. Each subplot contains a stacked columns chart of total listings by years. 
#The four subplot charts are for data of Houston, Dallas, Austin and San Antonio. 
ABhouston = data[data['city'] == 'Houston, TX'] 
listHouston = pd.crosstab(ABhouston['date_of_listing'].dt.year, ABhouston['bedrooms_count'])
?
ABdallas = data[data['city'] == 'Dallas, TX']
listDallas = pd.crosstab(ABdallas['date_of_listing'].dt.year, ABdallas['bedrooms_count'])
?
ABaustin = data[data['city'] == 'Austin, TX']
listAustin = pd.crosstab(ABaustin['date_of_listing'].dt.year, ABaustin['bedrooms_count'])
?
ABsan = data[data['city'] == 'San Antonio, TX']
listSan = pd.crosstab(ABsan['date_of_listing'].dt.year, ABsan['bedrooms_count'])
?
fig3, axes = plt.subplots(2,2, figsize= (12,12), sharey = True)
ax1 = listHouston.plot.barh(stacked = True, alpha = 0.8, grid = True, ax = axes[0][0])
ax1.set_title('number of listings of houston')
plt.ylabel('year')
?
ax2 = listDallas.plot.barh(stacked = True, alpha = 0.8, grid = True, ax = axes[0][1])
ax2.set_title('number of listings of dallas')
plt.ylabel('year')
?
ax3 = listAustin.plot.barh(stacked = True, alpha = 0.8, grid = True, ax = axes[1][0])
ax3.set_title('number of listings of Austin')
plt.ylabel('year')
?
ax4 = listSan.plot.barh(stacked = True, alpha = 0.8, grid = True, ax = axes[1][1])
ax4.set_title('number of listings of san Antonio')
plt.ylabel('year')
#17. Create a figure with two subplots. The first subplot contains a histogram chart of 1-bedroom listings where the nightly rates is between $0 and $500. Use 50 bins for the histogram chart.
#The second subplot is a probability density chart of the same data. 
HistDenBed = data[data['bedrooms_count'] == '1']
HistDenAvg = HistDenBed[HistDenBed['average_rate_per_night'].between(0,500, inclusive = True)]
bedroom1Group = HistDenAvg['average_rate_per_night']
fig, ax = plt.subplots(1,2, figsize = (12,5))
ax[0].hist(HistDenAvg['average_rate_per_night'],bins = 50, color = '#0504aa', alpha = 0.7, rwidth = 0.85)
ax[0].set_xlabel('value')
ax[0].set_ylabel('frequency')
ax[0].set_title('Price histogram for one bedroom listing')
ax[0].grid()
?
ax[1]=sns.distplot(HistDenAvg['average_rate_per_night'],hist= False,)
ax[1].set_xlabel('value')
ax[1].set_ylabel('density')
ax[1].set_title('Price density for one bedroom listing')
ax[1].grid()
?
#18. Please use a scatter plot to display the price distribution of all listings based on different bedroom numbers. 
bedrooms_count
import matplotlib.pyplot as plt
plt.figure(figsize=(10,10))
plt.scatter(data['bedrooms_count'], data['average_rate_per_night'], color = '#0504aa', alpha = 0.7, linewidth = 4, s = 20)
plt.xlabel('bedrooms_count')
plt.ylabel('average_rate_per_night')
plt.grid()
?
